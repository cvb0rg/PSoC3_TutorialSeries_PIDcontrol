C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) WL(2) PR(.\DP8051\DP8051_
                    -Keil_951\Debug/main.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include <project.h>
  13          #include <stdio.h>
  14          #include <math.h>
  15          #include "blinky.h"
  16          #include "pid_control.h"
  17          
  18          #define MAGNET_NUM           5u       // 5 magnets per wheel.
  19          #define WHEEL_DIAMETER     2.34       // Wheel radius in [m]
  20          #define PI           3.14159265       // pi
  21          #define FEET             0.3048       // F -> m
  22          
  23          float fDistanceTravelledPerRev = PI * WHEEL_DIAMETER;    // [m]
  24          float fSpeedMPS;                      // Speed read form hall effect sensor [m]/[s]
  25          float fSpeedFPS;                      // Speed read form hall effect sensor [f]/[s]
  26          float fV_ref = 4.0;                   // [feet]/[s]
  27          
  28          
  29          char str[16];                         // LCD char array 2x16
  30          
  31          float fTimerArray[10];                // 2 * MAGNET_NUM
  32          uint8 uiTimerArrayIndex;              // 0-9
  33          uint32 uiTimeStamp;                   // Timer period - capture
  34          float fTimeStamp;                     // Units of [s]
  35          
  36          float fTimePerRevolution;             // Time elapsed until the same magnet passes the H-sensor
  37          float fAvgTimePerRevolution;          // Time average over the last 5 readings (possible bug!)
  38          
  39          uint8 uiPWM;                          // PWM compare value
  40          uint8 i;                              // General purpose iterator
  41          
  42          /* Function prototype */
  43          //
  44          
  45          CY_ISR(hallEffectSensor)
  46          {
  47   1          // Get the index from the counter (0-9) for 5 magnets.
  48   1          uiTimerArrayIndex = hallTickCounter_ReadCounter();
  49   1          // Time elapsed from timer starting and hall effect pulse (units of clock ticks)
  50   1          uiTimeStamp = hallTickTimer_ReadPeriod() - hallTickTimer_ReadCapture();
  51   1          // Convert clock ticks to seconds (2.4MHz BUS CLK)
  52   1          fTimeStamp = uiTimeStamp / 2.4E7;  
  53   1          // Populate/update the timer array (2 values for each magnet)
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 2   

  54   1          fTimerArray[uiTimerArrayIndex] = fTimeStamp;
  55   1          
  56   1          fTimePerRevolution = 0;
  57   1          // Average time in takes for a revolution off of each magnet
  58   1          for(i = 0; i < 5; i++)
  59   1          {
  60   2              fTimePerRevolution += fabs(fTimerArray[i+5] - fTimerArray[i]);
  61   2              fAvgTimePerRevolution = fTimePerRevolution / 5;
  62   2          }
  63   1          
  64   1          // Calculate speed in [m]/[s]
  65   1          fSpeedMPS = fDistanceTravelledPerRev / fAvgTimePerRevolution;
  66   1          
  67   1          // Speed in [F]/[s]
  68   1          fSpeedFPS = fSpeedMPS / FEET;
  69   1          
  70   1          // Calculate the PWM_out signal and convert it to an int
  71   1          uiPWM = floor(pid_control(fSpeedFPS, fV_ref) + 0.5);
  72   1          PWM_GateVoltage_WriteCompare(uiPWM);
  73   1          
  74   1          
  75   1          
  76   1          
  77   1          
  78   1          
  79   1          
  80   1          LCD_ClearDisplay();
  81   1          
  82   1          LCD_Position(0u,0u);
  83   1          sprintf(str, "C: %u", (int)uiTimerArrayIndex);
  84   1          LCD_PrintString(str);
  85   1         
  86   1          LCD_Position(0u,5u);
  87   1          sprintf(str, "T: %.3f", fTimeStamp);
  88   1          LCD_PrintString(str);
  89   1          
  90   1          
  91   1          LCD_Position(1u,0u);
  92   1          sprintf(str, "dT: %.4f", fTimePerRevolution);
  93   1          LCD_PrintString(str);
  94   1          
  95   1          //LCD_Position(1u,0u);
  96   1          //sprintf(str,"T: %u",(int)uiTimeStamp);
  97   1          //LCD_PrintString(str);
  98   1          //LCD_PrintU32Number(uiTimeStamp);
  99   1          
 100   1         
 101   1          
 102   1      }
 103          
 104          
 105          int main()
 106          {
 107   1          //Blinky();
 108   1          
 109   1          CyGlobalIntEnable; /* Enable global interrupts. */
 110   1      
 111   1          // Enable the interrupt component connected to hallEffectSensor
 112   1          hallEffect_ISR_Start();
 113   1          hallEffect_ISR_SetVector(hallEffectSensor);
 114   1          
 115   1          // Start components
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 3   

 116   1          hallTickCounter_Start();
 117   1          hallTickTimer_Start();
 118   1          PWM_GateVoltage_Start();
 119   1          
 120   1          // Start clocks
 121   1          deBounce_Start();
 122   1          PWM_clock_Start();
 123   1          //testClock_Start();
 124   1          
 125   1          // Start LCD
 126   1          LCD_Start();
 127   1          LCD_ClearDisplay();
 128   1      
 129   1          for(;;)
 130   1          {
 131   2              /* Place your application code here. */
 132   2              /*
 133   2              CyDelay(1000);
 134   2              Blinky();
 135   2              LCD_Position(0u,0u);
 136   2              LCD_PrintU32Number(i);
 137   2              i++;
 138   2              */
 139   2              
 140   2          }
 141   1      }
 142          
 143          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION hallEffectSensor (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 48
002B 120000      E     LCALL   hallTickCounter_ReadCounter
002E 900000      R     MOV     DPTR,#uiTimerArrayIndex
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0033 120000      E     LCALL   hallTickTimer_ReadCapture
0036 C004              PUSH    AR4
0038 C005              PUSH    AR5
003A C006              PUSH    AR6
003C C007              PUSH    AR7
003E 120000      E     LCALL   hallTickTimer_ReadPeriod
0041 D003              POP     AR3
0043 D002              POP     AR2
0045 D001              POP     AR1
0047 D000              POP     AR0
0049 120000      E     LCALL   ?C?LSUB
004C 900000      R     MOV     DPTR,#uiTimeStamp
004F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 52
0052 900000      R     MOV     DPTR,#uiTimeStamp
0055 120000      E     LCALL   ?C?LLDXDATA
0058 E4                CLR     A
0059 120000      E     LCALL   ?C?FCASTL
005C 7B00              MOV     R3,#00H
005E 7A1B              MOV     R2,#01BH
0060 79B7              MOV     R1,#0B7H
0062 784B              MOV     R0,#04BH
0064 120000      E     LCALL   ?C?FPDIV
0067 900000      R     MOV     DPTR,#fTimeStamp
006A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 54
006D 900000      R     MOV     DPTR,#fTimeStamp
0070 120000      E     LCALL   ?C?LLDXDATA
0073 900000      R     MOV     DPTR,#uiTimerArrayIndex
0076 E0                MOVX    A,@DPTR
0077 FB                MOV     R3,A
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 5   

0078 EB                MOV     A,R3
0079 25E0              ADD     A,ACC
007B 25E0              ADD     A,ACC
007D 2400        R     ADD     A,#LOW fTimerArray
007F F582              MOV     DPL,A
0081 E4                CLR     A
0082 3400        R     ADDC    A,#HIGH fTimerArray
0084 F583              MOV     DPH,A
0086 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 56
0089 7F00              MOV     R7,#00H
008B 7E00              MOV     R6,#00H
008D 7D00              MOV     R5,#00H
008F 7C00              MOV     R4,#00H
0091 900000      R     MOV     DPTR,#fTimePerRevolution
0094 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 58
0097 900000      R     MOV     DPTR,#i
009A E4                CLR     A
009B F0                MOVX    @DPTR,A
009C         ?C0001:
009C 900000      R     MOV     DPTR,#i
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 C3                CLR     C
00A3 9405              SUBB    A,#05H
00A5 5079              JNC     ?C0002
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
00A7 900000      R     MOV     DPTR,#fTimePerRevolution
00AA 120000      E     LCALL   ?C?LLDXDATA
00AD C004              PUSH    AR4
00AF C005              PUSH    AR5
00B1 C006              PUSH    AR6
00B3 C007              PUSH    AR7
00B5 900000      R     MOV     DPTR,#i
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA EF                MOV     A,R7
00BB 25E0              ADD     A,ACC
00BD 25E0              ADD     A,ACC
00BF 2400        R     ADD     A,#LOW fTimerArray
00C1 F582              MOV     DPL,A
00C3 E4                CLR     A
00C4 3400        R     ADDC    A,#HIGH fTimerArray
00C6 F583              MOV     DPH,A
00C8 120000      E     LCALL   ?C?LLDXDATA0
00CB 900000      R     MOV     DPTR,#i
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 EF                MOV     A,R7
00D1 25E0              ADD     A,ACC
00D3 25E0              ADD     A,ACC
00D5 2400        R     ADD     A,#LOW fTimerArray+014H
00D7 F582              MOV     DPL,A
00D9 E4                CLR     A
00DA 3400        R     ADDC    A,#HIGH fTimerArray+014H
00DC F583              MOV     DPH,A
00DE 120000      E     LCALL   ?C?LLDXDATA
00E1 120000      E     LCALL   ?C?FPSUB
00E4 120000      E     LCALL   _fabs
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 6   

00E7 A804              MOV     R0,AR4
00E9 A905              MOV     R1,AR5
00EB AA06              MOV     R2,AR6
00ED AB07              MOV     R3,AR7
00EF D007              POP     AR7
00F1 D006              POP     AR6
00F3 D005              POP     AR5
00F5 D004              POP     AR4
00F7 120000      E     LCALL   ?C?FPADD
00FA 900000      R     MOV     DPTR,#fTimePerRevolution
00FD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 61
0100 7B00              MOV     R3,#00H
0102 7A00              MOV     R2,#00H
0104 79A0              MOV     R1,#0A0H
0106 7840              MOV     R0,#040H
0108 900000      R     MOV     DPTR,#fTimePerRevolution
010B 120000      E     LCALL   ?C?LLDXDATA
010E 120000      E     LCALL   ?C?FPDIV
0111 900000      R     MOV     DPTR,#fAvgTimePerRevolution
0114 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 62
0117 900000      R     MOV     DPTR,#i
011A E0                MOVX    A,@DPTR
011B 04                INC     A
011C F0                MOVX    @DPTR,A
011D 020000      R     LJMP    ?C0001
0120         ?C0002:
                                           ; SOURCE LINE # 65
0120 900000      R     MOV     DPTR,#fAvgTimePerRevolution
0123 120000      E     LCALL   ?C?LLDXDATA0
0126 900000      R     MOV     DPTR,#fDistanceTravelledPerRev
0129 120000      E     LCALL   ?C?LLDXDATA
012C 120000      E     LCALL   ?C?FPDIV
012F 900000      R     MOV     DPTR,#fSpeedMPS
0132 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 68
0135 7BBF              MOV     R3,#0BFH
0137 7A0E              MOV     R2,#0EH
0139 799C              MOV     R1,#09CH
013B 783E              MOV     R0,#03EH
013D 900000      R     MOV     DPTR,#fSpeedMPS
0140 120000      E     LCALL   ?C?LLDXDATA
0143 120000      E     LCALL   ?C?FPDIV
0146 900000      R     MOV     DPTR,#fSpeedFPS
0149 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 71
014C 900000      R     MOV     DPTR,#fSpeedFPS
014F 120000      E     LCALL   ?C?LLDXDATA
0152 C004              PUSH    AR4
0154 C005              PUSH    AR5
0156 C006              PUSH    AR6
0158 C007              PUSH    AR7
015A 900000      R     MOV     DPTR,#fV_ref
015D 120000      E     LCALL   ?C?LLDXDATA
0160 900000      E     MOV     DPTR,#?_pid_control?BYTE+04H
0163 120000      E     LCALL   ?C?LSTXDATA
0166 D007              POP     AR7
0168 D006              POP     AR6
016A D005              POP     AR5
016C D004              POP     AR4
016E 120000      E     LCALL   _pid_control
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 7   

0171 7B00              MOV     R3,#00H
0173 7A00              MOV     R2,#00H
0175 7900              MOV     R1,#00H
0177 783F              MOV     R0,#03FH
0179 120000      E     LCALL   ?C?FPADD
017C 120000      E     LCALL   _floor
017F 120000      E     LCALL   ?C?CASTF
0182 900000      R     MOV     DPTR,#uiPWM
0185 EF                MOV     A,R7
0186 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0187 900000      R     MOV     DPTR,#uiPWM
018A E0                MOVX    A,@DPTR
018B FF                MOV     R7,A
018C 120000      E     LCALL   _PWM_GateVoltage_WriteCompare
                                           ; SOURCE LINE # 80
018F 7F01              MOV     R7,#01H
0191 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 82
0194 7D00              MOV     R5,#00H
0196 7F00              MOV     R7,#00H
0198 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 83
019B 7B01              MOV     R3,#01H
019D 7A00        R     MOV     R2,#HIGH str
019F 7900        R     MOV     R1,#LOW str
01A1 C003              PUSH    AR3
01A3 C002              PUSH    AR2
01A5 C001              PUSH    AR1
01A7 7BFF              MOV     R3,#0FFH
01A9 7A00        R     MOV     R2,#HIGH ?SC_0
01AB 7900        R     MOV     R1,#LOW ?SC_0
01AD 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
01B0 120000      E     LCALL   ?C?PSTXDATA
01B3 900000      R     MOV     DPTR,#uiTimerArrayIndex
01B6 E0                MOVX    A,@DPTR
01B7 FF                MOV     R7,A
01B8 7E00              MOV     R6,#00H
01BA 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
01BD EE                MOV     A,R6
01BE F0                MOVX    @DPTR,A
01BF A3                INC     DPTR
01C0 EF                MOV     A,R7
01C1 F0                MOVX    @DPTR,A
01C2 D001              POP     AR1
01C4 D002              POP     AR2
01C6 D003              POP     AR3
01C8 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 84
01CB 7B01              MOV     R3,#01H
01CD 7A00        R     MOV     R2,#HIGH str
01CF 7900        R     MOV     R1,#LOW str
01D1 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 86
01D4 7D05              MOV     R5,#05H
01D6 7F00              MOV     R7,#00H
01D8 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 87
01DB 7B01              MOV     R3,#01H
01DD 7A00        R     MOV     R2,#HIGH str
01DF 7900        R     MOV     R1,#LOW str
01E1 C003              PUSH    AR3
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 8   

01E3 C002              PUSH    AR2
01E5 C001              PUSH    AR1
01E7 7BFF              MOV     R3,#0FFH
01E9 7A00        R     MOV     R2,#HIGH ?SC_6
01EB 7900        R     MOV     R1,#LOW ?SC_6
01ED 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
01F0 120000      E     LCALL   ?C?PSTXDATA
01F3 900000      R     MOV     DPTR,#fTimeStamp
01F6 120000      E     LCALL   ?C?LLDXDATA
01F9 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
01FC 120000      E     LCALL   ?C?LSTXDATA
01FF D001              POP     AR1
0201 D002              POP     AR2
0203 D003              POP     AR3
0205 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 88
0208 7B01              MOV     R3,#01H
020A 7A00        R     MOV     R2,#HIGH str
020C 7900        R     MOV     R1,#LOW str
020E 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 91
0211 7D00              MOV     R5,#00H
0213 7F01              MOV     R7,#01H
0215 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 92
0218 7B01              MOV     R3,#01H
021A 7A00        R     MOV     R2,#HIGH str
021C 7900        R     MOV     R1,#LOW str
021E C003              PUSH    AR3
0220 C002              PUSH    AR2
0222 C001              PUSH    AR1
0224 7BFF              MOV     R3,#0FFH
0226 7A00        R     MOV     R2,#HIGH ?SC_14
0228 7900        R     MOV     R1,#LOW ?SC_14
022A 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
022D 120000      E     LCALL   ?C?PSTXDATA
0230 900000      R     MOV     DPTR,#fTimePerRevolution
0233 120000      E     LCALL   ?C?LLDXDATA
0236 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0239 120000      E     LCALL   ?C?LSTXDATA
023C D001              POP     AR1
023E D002              POP     AR2
0240 D003              POP     AR3
0242 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 93
0245 7B01              MOV     R3,#01H
0247 7A00        R     MOV     R2,#HIGH str
0249 7900        R     MOV     R1,#LOW str
024B 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 102
024E D007              POP     AR7
0250 D006              POP     AR6
0252 D005              POP     AR5
0254 D004              POP     AR4
0256 D003              POP     AR3
0258 D002              POP     AR2
025A D001              POP     AR1
025C D000              POP     AR0
025E D0D0              POP     PSW
0260 D000        E     POP     ?C?XPAGE1SFR
0262 D086              POP     DPS
0264 D084              POP     DPL1
C51 COMPILER V9.51   MAIN                                                                  02/20/2016 01:20:45 PAGE 9   

0266 D085              POP     DPH1
0268 D082              POP     DPL
026A D083              POP     DPH
026C D0F0              POP     B
026E D0E0              POP     ACC
0270 32                RETI    
             ; FUNCTION hallEffectSensor (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 109
0000 D2AF              SETB    EA
0002 9044F4            MOV     DPTR,#044F4H
0005 74FD              MOV     A,#0FDH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0008 120000      E     LCALL   hallEffect_ISR_Start
                                           ; SOURCE LINE # 113
000B 7E00        R     MOV     R6,#HIGH hallEffectSensor
000D 7F00        R     MOV     R7,#LOW hallEffectSensor
000F 120000      E     LCALL   _hallEffect_ISR_SetVector
                                           ; SOURCE LINE # 116
0012 120000      E     LCALL   hallTickCounter_Start
                                           ; SOURCE LINE # 117
0015 120000      E     LCALL   hallTickTimer_Start
                                           ; SOURCE LINE # 118
0018 120000      E     LCALL   PWM_GateVoltage_Start
                                           ; SOURCE LINE # 121
001B 120000      E     LCALL   deBounce_Start
                                           ; SOURCE LINE # 122
001E 120000      E     LCALL   PWM_clock_Start
                                           ; SOURCE LINE # 126
0021 120000      E     LCALL   LCD_Start
                                           ; SOURCE LINE # 127
0024 7F01              MOV     R7,#01H
0026 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 129
0029         ?C0005:
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 140
0029 80FE              SJMP    ?C0005
002B 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    669    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =     91    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
