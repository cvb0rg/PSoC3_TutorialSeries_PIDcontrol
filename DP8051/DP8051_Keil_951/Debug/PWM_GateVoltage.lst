C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE PWM_GATEVOLTAGE
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\PWM_GateVoltage.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\PWM_GateVoltage.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB D
                    -F(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/PWM_GateVoltage.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\PW
                    -M_GateVoltage.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: PWM_GateVoltage.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7          *  comparitors. Each instance of this user module is capable of generating
   8          *  two PWM outputs with the same period. The pulse width is selectable between
   9          *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10          *  The compare value output may be configured to be active when the present
  11          *  counter is less than or less than/equal to the compare value.
  12          *  A terminal count output is also provided. It generates a pulse one clock
  13          *  width wide when the counter is equal to zero.
  14          *
  15          * Note:
  16          *
  17          *******************************************************************************
  18          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions,
  20          * disclaimers, and limitations in the end user license agreement accompanying
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "PWM_GateVoltage.h"
  25          
  26          /* Error message for removed <resource> through optimization */
  27          #ifdef PWM_GateVoltage_PWMUDB_genblk1_ctrlreg__REMOVED
                  #error PWM_v3_30 detected with a constant 0 for the enable or \
                       constant 1 for reset. This will prevent the component from operating.
              #endif /* PWM_GateVoltage_PWMUDB_genblk1_ctrlreg__REMOVED */
  31          
  32          uint8 PWM_GateVoltage_initVar = 0u;
  33          
  34          
  35          /*******************************************************************************
  36          * Function Name: PWM_GateVoltage_Start
  37          ********************************************************************************
  38          *
  39          * Summary:
  40          *  The start function initializes the pwm with the default values, the
  41          *  enables the counter to begin counting.  It does not enable interrupts,
  42          *  the EnableInt command should be called if interrupt generation is required.
  43          *
  44          * Parameters:
  45          *  None
  46          *
  47          * Return:
  48          *  None
  49          *
  50          * Global variables:
  51          *  PWM_GateVoltage_initVar: Is modified when this function is called for the
  52          *   first time. Is used to ensure that initialization happens only once.
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 2   

  53          *
  54          *******************************************************************************/
  55          void PWM_GateVoltage_Start(void) 
  56          {
  57   1          /* If not Initialized then initialize all required hardware and software */
  58   1          if(PWM_GateVoltage_initVar == 0u)
  59   1          {
  60   2              PWM_GateVoltage_Init();
  61   2              PWM_GateVoltage_initVar = 1u;
  62   2          }
  63   1          PWM_GateVoltage_Enable();
  64   1      
  65   1      }
  66          
  67          
  68          /*******************************************************************************
  69          * Function Name: PWM_GateVoltage_Init
  70          ********************************************************************************
  71          *
  72          * Summary:
  73          *  Initialize component's parameters to the parameters set by user in the
  74          *  customizer of the component placed onto schematic. Usually called in
  75          *  PWM_GateVoltage_Start().
  76          *
  77          * Parameters:
  78          *  None
  79          *
  80          * Return:
  81          *  None
  82          *
  83          *******************************************************************************/
  84          void PWM_GateVoltage_Init(void) 
  85          {
  86   1          #if (PWM_GateVoltage_UsingFixedFunction || PWM_GateVoltage_UseControl)
  87   1              uint8 ctrl;
  88   1          #endif /* (PWM_GateVoltage_UsingFixedFunction || PWM_GateVoltage_UseControl) */
  89   1      
  90   1          #if(!PWM_GateVoltage_UsingFixedFunction)
  91   1              #if(PWM_GateVoltage_UseStatus)
  92   1                  /* Interrupt State Backup for Critical Region*/
  93   1                  uint8 PWM_GateVoltage_interruptState;
  94   1              #endif /* (PWM_GateVoltage_UseStatus) */
  95   1          #endif /* (!PWM_GateVoltage_UsingFixedFunction) */
  96   1      
  97   1          #if (PWM_GateVoltage_UsingFixedFunction)
                      /* You are allowed to write the compare value (FF only) */
                      PWM_GateVoltage_CONTROL |= PWM_GateVoltage_CFG0_MODE;
                      #if (PWM_GateVoltage_DeadBand2_4)
                          PWM_GateVoltage_CONTROL |= PWM_GateVoltage_CFG0_DB;
                      #endif /* (PWM_GateVoltage_DeadBand2_4) */
              
                      ctrl = PWM_GateVoltage_CONTROL3 & ((uint8 )(~PWM_GateVoltage_CTRL_CMPMODE1_MASK));
                      PWM_GateVoltage_CONTROL3 = ctrl | PWM_GateVoltage_DEFAULT_COMPARE1_MODE;
              
                       /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      PWM_GateVoltage_RT1 &= ((uint8)(~PWM_GateVoltage_RT1_MASK));
                      PWM_GateVoltage_RT1 |= PWM_GateVoltage_SYNC;
              
                      /*Enable DSI Sync all all inputs of the PWM*/
                      PWM_GateVoltage_RT1 &= ((uint8)(~PWM_GateVoltage_SYNCDSI_MASK));
                      PWM_GateVoltage_RT1 |= PWM_GateVoltage_SYNCDSI_EN;
              
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 3   

                  #elif (PWM_GateVoltage_UseControl)
 116   1              /* Set the default compare mode defined in the parameter */
 117   1              ctrl = PWM_GateVoltage_CONTROL & ((uint8)(~PWM_GateVoltage_CTRL_CMPMODE2_MASK)) &
 118   1                      ((uint8)(~PWM_GateVoltage_CTRL_CMPMODE1_MASK));
 119   1              PWM_GateVoltage_CONTROL = ctrl | PWM_GateVoltage_DEFAULT_COMPARE2_MODE |
 120   1                                         PWM_GateVoltage_DEFAULT_COMPARE1_MODE;
 121   1          #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 122   1      
 123   1          #if (!PWM_GateVoltage_UsingFixedFunction)
 124   1              #if (PWM_GateVoltage_Resolution == 8)
 125   1                  /* Set FIFO 0 to 1 byte register for period*/
 126   1                  PWM_GateVoltage_AUX_CONTROLDP0 |= (PWM_GateVoltage_AUX_CTRL_FIFO0_CLR);
 127   1              #else /* (PWM_GateVoltage_Resolution == 16)*/
                          /* Set FIFO 0 to 1 byte register for period */
                          PWM_GateVoltage_AUX_CONTROLDP0 |= (PWM_GateVoltage_AUX_CTRL_FIFO0_CLR);
                          PWM_GateVoltage_AUX_CONTROLDP1 |= (PWM_GateVoltage_AUX_CTRL_FIFO0_CLR);
                      #endif /* (PWM_GateVoltage_Resolution == 8) */
 132   1      
 133   1              PWM_GateVoltage_WriteCounter(PWM_GateVoltage_INIT_PERIOD_VALUE);
 134   1          #endif /* (!PWM_GateVoltage_UsingFixedFunction) */
 135   1      
 136   1          PWM_GateVoltage_WritePeriod(PWM_GateVoltage_INIT_PERIOD_VALUE);
 137   1      
 138   1              #if (PWM_GateVoltage_UseOneCompareMode)
 139   1                  PWM_GateVoltage_WriteCompare(PWM_GateVoltage_INIT_COMPARE_VALUE1);
 140   1              #else
                          PWM_GateVoltage_WriteCompare1(PWM_GateVoltage_INIT_COMPARE_VALUE1);
                          PWM_GateVoltage_WriteCompare2(PWM_GateVoltage_INIT_COMPARE_VALUE2);
                      #endif /* (PWM_GateVoltage_UseOneCompareMode) */
 144   1      
 145   1              #if (PWM_GateVoltage_KillModeMinTime)
                          PWM_GateVoltage_WriteKillTime(PWM_GateVoltage_MinimumKillTime);
                      #endif /* (PWM_GateVoltage_KillModeMinTime) */
 148   1      
 149   1              #if (PWM_GateVoltage_DeadBandUsed)
                          PWM_GateVoltage_WriteDeadTime(PWM_GateVoltage_INIT_DEAD_TIME);
                      #endif /* (PWM_GateVoltage_DeadBandUsed) */
 152   1      
 153   1          #if (PWM_GateVoltage_UseStatus || PWM_GateVoltage_UsingFixedFunction)
 154   1              PWM_GateVoltage_SetInterruptMode(PWM_GateVoltage_INIT_INTERRUPTS_MODE);
 155   1          #endif /* (PWM_GateVoltage_UseStatus || PWM_GateVoltage_UsingFixedFunction) */
 156   1      
 157   1          #if (PWM_GateVoltage_UsingFixedFunction)
                      /* Globally Enable the Fixed Function Block chosen */
                      PWM_GateVoltage_GLOBAL_ENABLE |= PWM_GateVoltage_BLOCK_EN_MASK;
                      /* Set the Interrupt source to come from the status register */
                      PWM_GateVoltage_CONTROL2 |= PWM_GateVoltage_CTRL2_IRQ_SEL;
                  #else
 163   1              #if(PWM_GateVoltage_UseStatus)
 164   1      
 165   1                  /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 166   1                  /* Enter Critical Region*/
 167   1                  PWM_GateVoltage_interruptState = CyEnterCriticalSection();
 168   1                  /* Use the interrupt output of the status register for IRQ output */
 169   1                  PWM_GateVoltage_STATUS_AUX_CTRL |= PWM_GateVoltage_STATUS_ACTL_INT_EN_MASK;
 170   1      
 171   1                   /* Exit Critical Region*/
 172   1                  CyExitCriticalSection(PWM_GateVoltage_interruptState);
 173   1      
 174   1                  /* Clear the FIFO to enable the PWM_GateVoltage_STATUS_FIFOFULL
 175   1                         bit to be set on FIFO full. */
 176   1                  PWM_GateVoltage_ClearFIFO();
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 4   

 177   1              #endif /* (PWM_GateVoltage_UseStatus) */
 178   1          #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 179   1      }
 180          
 181          
 182          /*******************************************************************************
 183          * Function Name: PWM_GateVoltage_Enable
 184          ********************************************************************************
 185          *
 186          * Summary:
 187          *  Enables the PWM block operation
 188          *
 189          * Parameters:
 190          *  None
 191          *
 192          * Return:
 193          *  None
 194          *
 195          * Side Effects:
 196          *  This works only if software enable mode is chosen
 197          *
 198          *******************************************************************************/
 199          void PWM_GateVoltage_Enable(void) 
 200          {
 201   1          /* Globally Enable the Fixed Function Block chosen */
 202   1          #if (PWM_GateVoltage_UsingFixedFunction)
                      PWM_GateVoltage_GLOBAL_ENABLE |= PWM_GateVoltage_BLOCK_EN_MASK;
                      PWM_GateVoltage_GLOBAL_STBY_ENABLE |= PWM_GateVoltage_BLOCK_STBY_EN_MASK;
                  #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 206   1      
 207   1          /* Enable the PWM from the control register  */
 208   1          #if (PWM_GateVoltage_UseControl || PWM_GateVoltage_UsingFixedFunction)
 209   1              PWM_GateVoltage_CONTROL |= PWM_GateVoltage_CTRL_ENABLE;
 210   1          #endif /* (PWM_GateVoltage_UseControl || PWM_GateVoltage_UsingFixedFunction) */
 211   1      }
 212          
 213          
 214          /*******************************************************************************
 215          * Function Name: PWM_GateVoltage_Stop
 216          ********************************************************************************
 217          *
 218          * Summary:
 219          *  The stop function halts the PWM, but does not change any modes or disable
 220          *  interrupts.
 221          *
 222          * Parameters:
 223          *  None
 224          *
 225          * Return:
 226          *  None
 227          *
 228          * Side Effects:
 229          *  If the Enable mode is set to Hardware only then this function
 230          *  has no effect on the operation of the PWM
 231          *
 232          *******************************************************************************/
 233          void PWM_GateVoltage_Stop(void) 
 234          {
 235   1          #if (PWM_GateVoltage_UseControl || PWM_GateVoltage_UsingFixedFunction)
 236   1              PWM_GateVoltage_CONTROL &= ((uint8)(~PWM_GateVoltage_CTRL_ENABLE));
 237   1          #endif /* (PWM_GateVoltage_UseControl || PWM_GateVoltage_UsingFixedFunction) */
 238   1      
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 5   

 239   1          /* Globally disable the Fixed Function Block chosen */
 240   1          #if (PWM_GateVoltage_UsingFixedFunction)
                      PWM_GateVoltage_GLOBAL_ENABLE &= ((uint8)(~PWM_GateVoltage_BLOCK_EN_MASK));
                      PWM_GateVoltage_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_GateVoltage_BLOCK_STBY_EN_MASK));
                  #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 244   1      }
 245          
 246          #if (PWM_GateVoltage_UseOneCompareMode)
 247              #if (PWM_GateVoltage_CompareMode1SW)
              
              
                      /*******************************************************************************
                      * Function Name: PWM_GateVoltage_SetCompareMode
                      ********************************************************************************
                      *
                      * Summary:
                      *  This function writes the Compare Mode for the pwm output when in Dither mode,
                      *  Center Align Mode or One Output Mode.
                      *
                      * Parameters:
                      *  comparemode:  The new compare mode for the PWM output. Use the compare types
                      *                defined in the H file as input arguments.
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void PWM_GateVoltage_SetCompareMode(uint8 comparemode) 
                      {
                          #if(PWM_GateVoltage_UsingFixedFunction)
              
                              #if(0 != PWM_GateVoltage_CTRL_CMPMODE1_SHIFT)
                                  uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_GateVoltage_CTRL_CMPMODE1
             -_SHIFT));
                              #else
                                  uint8 comparemodemasked = comparemode;
                              #endif /* (0 != PWM_GateVoltage_CTRL_CMPMODE1_SHIFT) */
              
                              PWM_GateVoltage_CONTROL3 &= ((uint8)(~PWM_GateVoltage_CTRL_CMPMODE1_MASK)); /*Clear Existi
             -ng Data */
                              PWM_GateVoltage_CONTROL3 |= comparemodemasked;
              
                          #elif (PWM_GateVoltage_UseControl)
              
                              #if(0 != PWM_GateVoltage_CTRL_CMPMODE1_SHIFT)
                                  uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_GateVoltage_CTRL_CMPMODE
             -1_SHIFT)) &
                                                              PWM_GateVoltage_CTRL_CMPMODE1_MASK;
                              #else
                                  uint8 comparemode1masked = comparemode & PWM_GateVoltage_CTRL_CMPMODE1_MASK;
                              #endif /* (0 != PWM_GateVoltage_CTRL_CMPMODE1_SHIFT) */
              
                              #if(0 != PWM_GateVoltage_CTRL_CMPMODE2_SHIFT)
                                  uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_GateVoltage_CTRL_CMPMODE
             -2_SHIFT)) &
                                                             PWM_GateVoltage_CTRL_CMPMODE2_MASK;
                              #else
                                  uint8 comparemode2masked = comparemode & PWM_GateVoltage_CTRL_CMPMODE2_MASK;
                              #endif /* (0 != PWM_GateVoltage_CTRL_CMPMODE2_SHIFT) */
              
                              /*Clear existing mode */
                              PWM_GateVoltage_CONTROL &= ((uint8)(~(PWM_GateVoltage_CTRL_CMPMODE1_MASK |
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 6   

                                                          PWM_GateVoltage_CTRL_CMPMODE2_MASK)));
                              PWM_GateVoltage_CONTROL |= (comparemode1masked | comparemode2masked);
              
                          #else
                              uint8 temp = comparemode;
                          #endif /* (PWM_GateVoltage_UsingFixedFunction) */
                      }
                  #endif /* PWM_GateVoltage_CompareMode1SW */
 305          
 306          #else /* UseOneCompareMode */
              
                  #if (PWM_GateVoltage_CompareMode1SW)
              
              
                      /*******************************************************************************
                      * Function Name: PWM_GateVoltage_SetCompareMode1
                      ********************************************************************************
                      *
                      * Summary:
                      *  This function writes the Compare Mode for the pwm or pwm1 output
                      *
                      * Parameters:
                      *  comparemode:  The new compare mode for the PWM output. Use the compare types
                      *                defined in the H file as input arguments.
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void PWM_GateVoltage_SetCompareMode1(uint8 comparemode) 
                      {
                          #if(0 != PWM_GateVoltage_CTRL_CMPMODE1_SHIFT)
                              uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_GateVoltage_CTRL_CMPMODE1_SHI
             -FT)) &
                                                         PWM_GateVoltage_CTRL_CMPMODE1_MASK;
                          #else
                              uint8 comparemodemasked = comparemode & PWM_GateVoltage_CTRL_CMPMODE1_MASK;
                          #endif /* (0 != PWM_GateVoltage_CTRL_CMPMODE1_SHIFT) */
              
                          #if (PWM_GateVoltage_UseControl)
                              PWM_GateVoltage_CONTROL &= ((uint8)(~PWM_GateVoltage_CTRL_CMPMODE1_MASK)); /*Clear existin
             -g mode */
                              PWM_GateVoltage_CONTROL |= comparemodemasked;
                          #endif /* (PWM_GateVoltage_UseControl) */
                      }
                  #endif /* PWM_GateVoltage_CompareMode1SW */
              
              #if (PWM_GateVoltage_CompareMode2SW)
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_SetCompareMode2
                  ********************************************************************************
                  *
                  * Summary:
                  *  This function writes the Compare Mode for the pwm or pwm2 output
                  *
                  * Parameters:
                  *  comparemode:  The new compare mode for the PWM output. Use the compare types
                  *                defined in the H file as input arguments.
                  *
                  * Return:
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 7   

                  *  None
                  *
                  *******************************************************************************/
                  void PWM_GateVoltage_SetCompareMode2(uint8 comparemode) 
                  {
              
                      #if(0 != PWM_GateVoltage_CTRL_CMPMODE2_SHIFT)
                          uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_GateVoltage_CTRL_CMPMODE2_SHIFT))
             - &
                                                               PWM_GateVoltage_CTRL_CMPMODE2_MASK;
                      #else
                          uint8 comparemodemasked = comparemode & PWM_GateVoltage_CTRL_CMPMODE2_MASK;
                      #endif /* (0 != PWM_GateVoltage_CTRL_CMPMODE2_SHIFT) */
              
                      #if (PWM_GateVoltage_UseControl)
                          PWM_GateVoltage_CONTROL &= ((uint8)(~PWM_GateVoltage_CTRL_CMPMODE2_MASK)); /*Clear existing mo
             -de */
                          PWM_GateVoltage_CONTROL |= comparemodemasked;
                      #endif /* (PWM_GateVoltage_UseControl) */
                  }
                  #endif /*PWM_GateVoltage_CompareMode2SW */
              
              #endif /* UseOneCompareMode */
 378          
 379          
 380          #if (!PWM_GateVoltage_UsingFixedFunction)
 381          
 382          
 383              /*******************************************************************************
 384              * Function Name: PWM_GateVoltage_WriteCounter
 385              ********************************************************************************
 386              *
 387              * Summary:
 388              *  Writes a new counter value directly to the counter register. This will be
 389              *  implemented for that currently running period and only that period. This API
 390              *  is valid only for UDB implementation and not available for fixed function
 391              *  PWM implementation.
 392              *
 393              * Parameters:
 394              *  counter:  The period new period counter value.
 395              *
 396              * Return:
 397              *  None
 398              *
 399              * Side Effects:
 400              *  The PWM Period will be reloaded when a counter value will be a zero
 401              *
 402              *******************************************************************************/
 403              void PWM_GateVoltage_WriteCounter(uint8 counter) \
 404                                                 
 405              {
 406   1              CY_SET_REG8(PWM_GateVoltage_COUNTER_LSB_PTR, counter);
 407   1          }
 408          
 409          
 410              /*******************************************************************************
 411              * Function Name: PWM_GateVoltage_ReadCounter
 412              ********************************************************************************
 413              *
 414              * Summary:
 415              *  This function returns the current value of the counter.  It doesn't matter
 416              *  if the counter is enabled or running.
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 8   

 417              *
 418              * Parameters:
 419              *  None
 420              *
 421              * Return:
 422              *  The current value of the counter.
 423              *
 424              *******************************************************************************/
 425              uint8 PWM_GateVoltage_ReadCounter(void) 
 426              {
 427   1              /* Force capture by reading Accumulator */
 428   1              /* Must first do a software capture to be able to read the counter */
 429   1              /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430   1                (void)CY_GET_REG8(PWM_GateVoltage_COUNTERCAP_LSB_PTR_8BIT);
 431   1      
 432   1              /* Read the data from the FIFO */
 433   1              return (CY_GET_REG8(PWM_GateVoltage_CAPTURE_LSB_PTR));
 434   1          }
 435          
 436              #if (PWM_GateVoltage_UseStatus)
 437          
 438          
 439                  /*******************************************************************************
 440                  * Function Name: PWM_GateVoltage_ClearFIFO
 441                  ********************************************************************************
 442                  *
 443                  * Summary:
 444                  *  This function clears all capture data from the capture FIFO
 445                  *
 446                  * Parameters:
 447                  *  None
 448                  *
 449                  * Return:
 450                  *  None
 451                  *
 452                  *******************************************************************************/
 453                  void PWM_GateVoltage_ClearFIFO(void) 
 454                  {
 455   1                  while(0u != (PWM_GateVoltage_ReadStatusRegister() & PWM_GateVoltage_STATUS_FIFONEMPTY))
 456   1                  {
 457   2                      (void)PWM_GateVoltage_ReadCapture();
 458   2                  }
 459   1              }
 460          
 461              #endif /* PWM_GateVoltage_UseStatus */
 462          
 463          #endif /* !PWM_GateVoltage_UsingFixedFunction */
 464          
 465          
 466          /*******************************************************************************
 467          * Function Name: PWM_GateVoltage_WritePeriod
 468          ********************************************************************************
 469          *
 470          * Summary:
 471          *  This function is used to change the period of the counter.  The new period
 472          *  will be loaded the next time terminal count is detected.
 473          *
 474          * Parameters:
 475          *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476          *           will result in the counter remaining at zero.
 477          *
 478          * Return:
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 9   

 479          *  None
 480          *
 481          *******************************************************************************/
 482          void PWM_GateVoltage_WritePeriod(uint8 period) 
 483          {
 484   1          #if(PWM_GateVoltage_UsingFixedFunction)
                      CY_SET_REG16(PWM_GateVoltage_PERIOD_LSB_PTR, (uint16)period);
                  #else
 487   1              CY_SET_REG8(PWM_GateVoltage_PERIOD_LSB_PTR, period);
 488   1          #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 489   1      }
 490          
 491          #if (PWM_GateVoltage_UseOneCompareMode)
 492          
 493          
 494              /*******************************************************************************
 495              * Function Name: PWM_GateVoltage_WriteCompare
 496              ********************************************************************************
 497              *
 498              * Summary:
 499              *  This funtion is used to change the compare1 value when the PWM is in Dither
 500              *  mode. The compare output will reflect the new value on the next UDB clock.
 501              *  The compare output will be driven high when the present counter value is
 502              *  compared to the compare value based on the compare mode defined in
 503              *  Dither Mode.
 504              *
 505              * Parameters:
 506              *  compare:  New compare value.
 507              *
 508              * Return:
 509              *  None
 510              *
 511              * Side Effects:
 512              *  This function is only available if the PWM mode parameter is set to
 513              *  Dither Mode, Center Aligned Mode or One Output Mode
 514              *
 515              *******************************************************************************/
 516              void PWM_GateVoltage_WriteCompare(uint8 compare) \
 517                                                 
 518              {
 519   1              #if(PWM_GateVoltage_UsingFixedFunction)
                          CY_SET_REG16(PWM_GateVoltage_COMPARE1_LSB_PTR, (uint16)compare);
                      #else
 522   1                  CY_SET_REG8(PWM_GateVoltage_COMPARE1_LSB_PTR, compare);
 523   1              #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 524   1      
 525   1              #if (PWM_GateVoltage_PWMMode == PWM_GateVoltage__B_PWM__DITHER)
                          #if(PWM_GateVoltage_UsingFixedFunction)
                              CY_SET_REG16(PWM_GateVoltage_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
                          #else
                              CY_SET_REG8(PWM_GateVoltage_COMPARE2_LSB_PTR, (compare + 1u));
                          #endif /* (PWM_GateVoltage_UsingFixedFunction) */
                      #endif /* (PWM_GateVoltage_PWMMode == PWM_GateVoltage__B_PWM__DITHER) */
 532   1          }
 533          
 534          
 535          #else
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_WriteCompare1
                  ********************************************************************************
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 10  

                  *
                  * Summary:
                  *  This funtion is used to change the compare1 value.  The compare output will
                  *  reflect the new value on the next UDB clock.  The compare output will be
                  *  driven high when the present counter value is less than or less than or
                  *  equal to the compare register, depending on the mode.
                  *
                  * Parameters:
                  *  compare:  New compare value.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void PWM_GateVoltage_WriteCompare1(uint8 compare) \
                                                      
                  {
                      #if(PWM_GateVoltage_UsingFixedFunction)
                          CY_SET_REG16(PWM_GateVoltage_COMPARE1_LSB_PTR, (uint16)compare);
                      #else
                          CY_SET_REG8(PWM_GateVoltage_COMPARE1_LSB_PTR, compare);
                      #endif /* (PWM_GateVoltage_UsingFixedFunction) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_WriteCompare2
                  ********************************************************************************
                  *
                  * Summary:
                  *  This funtion is used to change the compare value, for compare1 output.
                  *  The compare output will reflect the new value on the next UDB clock.
                  *  The compare output will be driven high when the present counter value is
                  *  less than or less than or equal to the compare register, depending on the
                  *  mode.
                  *
                  * Parameters:
                  *  compare:  New compare value.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void PWM_GateVoltage_WriteCompare2(uint8 compare) \
                                                      
                  {
                      #if(PWM_GateVoltage_UsingFixedFunction)
                          CY_SET_REG16(PWM_GateVoltage_COMPARE2_LSB_PTR, compare);
                      #else
                          CY_SET_REG8(PWM_GateVoltage_COMPARE2_LSB_PTR, compare);
                      #endif /* (PWM_GateVoltage_UsingFixedFunction) */
                  }
              #endif /* UseOneCompareMode */
 594          
 595          #if (PWM_GateVoltage_DeadBandUsed)
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_WriteDeadTime
                  ********************************************************************************
                  *
                  * Summary:
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 11  

                  *  This function writes the dead-band counts to the corresponding register
                  *
                  * Parameters:
                  *  deadtime:  Number of counts for dead time
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void PWM_GateVoltage_WriteDeadTime(uint8 deadtime) 
                  {
                      /* If using the Dead Band 1-255 mode then just write the register */
                      #if(!PWM_GateVoltage_DeadBand2_4)
                          CY_SET_REG8(PWM_GateVoltage_DEADBAND_COUNT_PTR, deadtime);
                      #else
                          /* Otherwise the data has to be masked and offset */
                          /* Clear existing data */
                          PWM_GateVoltage_DEADBAND_COUNT &= ((uint8)(~PWM_GateVoltage_DEADBAND_COUNT_MASK));
              
                          /* Set new dead time */
                          #if(PWM_GateVoltage_DEADBAND_COUNT_SHIFT)
                              PWM_GateVoltage_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_GateVoltage_DEADBAND_COU
             -NT_SHIFT)) &
                                                                  PWM_GateVoltage_DEADBAND_COUNT_MASK;
                          #else
                              PWM_GateVoltage_DEADBAND_COUNT |= deadtime & PWM_GateVoltage_DEADBAND_COUNT_MASK;
                          #endif /* (PWM_GateVoltage_DEADBAND_COUNT_SHIFT) */
              
                      #endif /* (!PWM_GateVoltage_DeadBand2_4) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_ReadDeadTime
                  ********************************************************************************
                  *
                  * Summary:
                  *  This function reads the dead-band counts from the corresponding register
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  Dead Band Counts
                  *
                  *******************************************************************************/
                  uint8 PWM_GateVoltage_ReadDeadTime(void) 
                  {
                      /* If using the Dead Band 1-255 mode then just read the register */
                      #if(!PWM_GateVoltage_DeadBand2_4)
                          return (CY_GET_REG8(PWM_GateVoltage_DEADBAND_COUNT_PTR));
                      #else
              
                          /* Otherwise the data has to be masked and offset */
                          #if(PWM_GateVoltage_DEADBAND_COUNT_SHIFT)
                              return ((uint8)(((uint8)(PWM_GateVoltage_DEADBAND_COUNT & PWM_GateVoltage_DEADBAND_COUNT_M
             -ASK)) >>
                                                                                         PWM_GateVoltage_DEADBAND_COUNT_
             -SHIFT));
                          #else
                              return (PWM_GateVoltage_DEADBAND_COUNT & PWM_GateVoltage_DEADBAND_COUNT_MASK);
                          #endif /* (PWM_GateVoltage_DEADBAND_COUNT_SHIFT) */
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 12  

                      #endif /* (!PWM_GateVoltage_DeadBand2_4) */
                  }
              #endif /* DeadBandUsed */
 665          
 666          #if (PWM_GateVoltage_UseStatus || PWM_GateVoltage_UsingFixedFunction)
 667          
 668          
 669              /*******************************************************************************
 670              * Function Name: PWM_GateVoltage_SetInterruptMode
 671              ********************************************************************************
 672              *
 673              * Summary:
 674              *  This function configures the interrupts mask control of theinterrupt
 675              *  source status register.
 676              *
 677              * Parameters:
 678              *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679              *
 680              * Return:
 681              *  None
 682              *
 683              *******************************************************************************/
 684              void PWM_GateVoltage_SetInterruptMode(uint8 interruptMode) 
 685              {
 686   1              CY_SET_REG8(PWM_GateVoltage_STATUS_MASK_PTR, interruptMode);
 687   1          }
 688          
 689          
 690              /*******************************************************************************
 691              * Function Name: PWM_GateVoltage_ReadStatusRegister
 692              ********************************************************************************
 693              *
 694              * Summary:
 695              *  This function returns the current state of the status register.
 696              *
 697              * Parameters:
 698              *  None
 699              *
 700              * Return:
 701              *  uint8 : Current status register value. The status register bits are:
 702              *  [7:6] : Unused(0)
 703              *  [5]   : Kill event output
 704              *  [4]   : FIFO not empty
 705              *  [3]   : FIFO full
 706              *  [2]   : Terminal count
 707              *  [1]   : Compare output 2
 708              *  [0]   : Compare output 1
 709              *
 710              *******************************************************************************/
 711              uint8 PWM_GateVoltage_ReadStatusRegister(void) 
 712              {
 713   1              return (CY_GET_REG8(PWM_GateVoltage_STATUS_PTR));
 714   1          }
 715          
 716          #endif /* (PWM_GateVoltage_UseStatus || PWM_GateVoltage_UsingFixedFunction) */
 717          
 718          
 719          #if (PWM_GateVoltage_UseControl)
 720          
 721          
 722              /*******************************************************************************
 723              * Function Name: PWM_GateVoltage_ReadControlRegister
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 13  

 724              ********************************************************************************
 725              *
 726              * Summary:
 727              *  Returns the current state of the control register. This API is available
 728              *  only if the control register is not removed.
 729              *
 730              * Parameters:
 731              *  None
 732              *
 733              * Return:
 734              *  uint8 : Current control register value
 735              *
 736              *******************************************************************************/
 737              uint8 PWM_GateVoltage_ReadControlRegister(void) 
 738              {
 739   1              uint8 result;
 740   1      
 741   1              result = CY_GET_REG8(PWM_GateVoltage_CONTROL_PTR);
 742   1              return (result);
 743   1          }
 744          
 745          
 746              /*******************************************************************************
 747              * Function Name: PWM_GateVoltage_WriteControlRegister
 748              ********************************************************************************
 749              *
 750              * Summary:
 751              *  Sets the bit field of the control register. This API is available only if
 752              *  the control register is not removed.
 753              *
 754              * Parameters:
 755              *  uint8 control: Control register bit field, The status register bits are:
 756              *  [7]   : PWM Enable
 757              *  [6]   : Reset
 758              *  [5:3] : Compare Mode2
 759              *  [2:0] : Compare Mode2
 760              *
 761              * Return:
 762              *  None
 763              *
 764              *******************************************************************************/
 765              void PWM_GateVoltage_WriteControlRegister(uint8 control) 
 766              {
 767   1              CY_SET_REG8(PWM_GateVoltage_CONTROL_PTR, control);
 768   1          }
 769          
 770          #endif /* (PWM_GateVoltage_UseControl) */
 771          
 772          
 773          #if (!PWM_GateVoltage_UsingFixedFunction)
 774          
 775          
 776              /*******************************************************************************
 777              * Function Name: PWM_GateVoltage_ReadCapture
 778              ********************************************************************************
 779              *
 780              * Summary:
 781              *  Reads the capture value from the capture FIFO.
 782              *
 783              * Parameters:
 784              *  None
 785              *
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 14  

 786              * Return:
 787              *  uint8/uint16: The current capture value
 788              *
 789              *******************************************************************************/
 790              uint8 PWM_GateVoltage_ReadCapture(void) 
 791              {
 792   1              return (CY_GET_REG8(PWM_GateVoltage_CAPTURE_LSB_PTR));
 793   1          }
 794          
 795          #endif /* (!PWM_GateVoltage_UsingFixedFunction) */
 796          
 797          
 798          #if (PWM_GateVoltage_UseOneCompareMode)
 799          
 800          
 801              /*******************************************************************************
 802              * Function Name: PWM_GateVoltage_ReadCompare
 803              ********************************************************************************
 804              *
 805              * Summary:
 806              *  Reads the compare value for the compare output when the PWM Mode parameter is
 807              *  set to Dither mode, Center Aligned mode, or One Output mode.
 808              *
 809              * Parameters:
 810              *  None
 811              *
 812              * Return:
 813              *  uint8/uint16: Current compare value
 814              *
 815              *******************************************************************************/
 816              uint8 PWM_GateVoltage_ReadCompare(void) 
 817              {
 818   1              #if(PWM_GateVoltage_UsingFixedFunction)
                          return ((uint8)CY_GET_REG16(PWM_GateVoltage_COMPARE1_LSB_PTR));
                      #else
 821   1                  return (CY_GET_REG8(PWM_GateVoltage_COMPARE1_LSB_PTR));
 822   1              #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 823   1          }
 824          
 825          #else
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_ReadCompare1
                  ********************************************************************************
                  *
                  * Summary:
                  *  Reads the compare value for the compare1 output.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  uint8/uint16: Current compare value.
                  *
                  *******************************************************************************/
                  uint8 PWM_GateVoltage_ReadCompare1(void) 
                  {
                      return (CY_GET_REG8(PWM_GateVoltage_COMPARE1_LSB_PTR));
                  }
              
              
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 15  

                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_ReadCompare2
                  ********************************************************************************
                  *
                  * Summary:
                  *  Reads the compare value for the compare2 output.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  uint8/uint16: Current compare value.
                  *
                  *******************************************************************************/
                  uint8 PWM_GateVoltage_ReadCompare2(void) 
                  {
                      return (CY_GET_REG8(PWM_GateVoltage_COMPARE2_LSB_PTR));
                  }
              
              #endif /* (PWM_GateVoltage_UseOneCompareMode) */
 868          
 869          
 870          /*******************************************************************************
 871          * Function Name: PWM_GateVoltage_ReadPeriod
 872          ********************************************************************************
 873          *
 874          * Summary:
 875          *  Reads the period value used by the PWM hardware.
 876          *
 877          * Parameters:
 878          *  None
 879          *
 880          * Return:
 881          *  uint8/16: Period value
 882          *
 883          *******************************************************************************/
 884          uint8 PWM_GateVoltage_ReadPeriod(void) 
 885          {
 886   1          #if(PWM_GateVoltage_UsingFixedFunction)
                      return ((uint8)CY_GET_REG16(PWM_GateVoltage_PERIOD_LSB_PTR));
                  #else
 889   1              return (CY_GET_REG8(PWM_GateVoltage_PERIOD_LSB_PTR));
 890   1          #endif /* (PWM_GateVoltage_UsingFixedFunction) */
 891   1      }
 892          
 893          #if ( PWM_GateVoltage_KillModeMinTime)
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_WriteKillTime
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the kill time value used by the hardware when the Kill Mode
                  *  is set to Minimum Time.
                  *
                  * Parameters:
                  *  uint8: Minimum Time kill counts
                  *
                  * Return:
                  *  None
                  *
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 16  

                  *******************************************************************************/
                  void PWM_GateVoltage_WriteKillTime(uint8 killtime) 
                  {
                      CY_SET_REG8(PWM_GateVoltage_KILLMODEMINTIME_PTR, killtime);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: PWM_GateVoltage_ReadKillTime
                  ********************************************************************************
                  *
                  * Summary:
                  *  Reads the kill time value used by the hardware when the Kill Mode is set
                  *  to Minimum Time.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  uint8: The current Minimum Time kill counts
                  *
                  *******************************************************************************/
                  uint8 PWM_GateVoltage_ReadKillTime(void) 
                  {
                      return (CY_GET_REG8(PWM_GateVoltage_KILLMODEMINTIME_PTR));
                  }
              
              #endif /* ( PWM_GateVoltage_KillModeMinTime) */
 938          
 939          /* [] END OF FILE */
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 17  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION PWM_GateVoltage_Start (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
0000 900000      R     MOV     DPTR,#PWM_GateVoltage_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0008 120000      R     LCALL   PWM_GateVoltage_Init
                                           ; SOURCE LINE # 61
000B 900000      R     MOV     DPTR,#PWM_GateVoltage_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0011         ?C0001:
                                           ; SOURCE LINE # 63
0011 120000      R     LCALL   PWM_GateVoltage_Enable
                                           ; SOURCE LINE # 65
0014 22                RET     
             ; FUNCTION PWM_GateVoltage_Start (END)

             ; FUNCTION PWM_GateVoltage_Init (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 118
0000 906476            MOV     DPTR,#06476H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54C0              ANL     A,#0C0H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#ctrl
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
000E 900000      R     MOV     DPTR,#ctrl
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 4409              ORL     A,#09H
0016 FF                MOV     R7,A
0017 906476            MOV     DPTR,#06476H
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
001C 906496            MOV     DPTR,#06496H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4401              ORL     A,#01H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0027 7FFF              MOV     R7,#0FFH
0029 120000      R     LCALL   _PWM_GateVoltage_WriteCounter
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 18  

                                           ; SOURCE LINE # 136
002C 7FFF              MOV     R7,#0FFH
002E 120000      R     LCALL   _PWM_GateVoltage_WritePeriod
                                           ; SOURCE LINE # 139
0031 7F7F              MOV     R7,#07FH
0033 120000      R     LCALL   _PWM_GateVoltage_WriteCompare
                                           ; SOURCE LINE # 154
0036 7F00              MOV     R7,#00H
0038 120000      R     LCALL   _PWM_GateVoltage_SetInterruptMode
                                           ; SOURCE LINE # 167
003B 120000      E     LCALL   CyEnterCriticalSection
003E 900000      R     MOV     DPTR,#PWM_GateVoltage_interruptState
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0043 906496            MOV     DPTR,#06496H
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 4410              ORL     A,#010H
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
004E 900000      R     MOV     DPTR,#PWM_GateVoltage_interruptState
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 176
0056 120000      R     LCALL   PWM_GateVoltage_ClearFIFO
                                           ; SOURCE LINE # 179
0059 22                RET     
             ; FUNCTION PWM_GateVoltage_Init (END)

             ; FUNCTION PWM_GateVoltage_Enable (BEGIN)
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 209
0000 906476            MOV     DPTR,#06476H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
000B 22                RET     
             ; FUNCTION PWM_GateVoltage_Enable (END)

             ; FUNCTION PWM_GateVoltage_Stop (BEGIN)
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 236
0000 906476            MOV     DPTR,#06476H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 19  

                                           ; SOURCE LINE # 244
000B 22                RET     
             ; FUNCTION PWM_GateVoltage_Stop (END)

             ; FUNCTION _PWM_GateVoltage_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 403
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0005 900000      R     MOV     DPTR,#counter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906406            MOV     DPTR,#06406H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
000F 22                RET     
             ; FUNCTION _PWM_GateVoltage_WriteCounter (END)

             ; FUNCTION PWM_GateVoltage_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 430
0000 906416            MOV     DPTR,#06416H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 433
0005 906456            MOV     DPTR,#06456H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 434
000A         ?C0007:
000A 22                RET     
             ; FUNCTION PWM_GateVoltage_ReadCounter (END)

             ; FUNCTION PWM_GateVoltage_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0000         ?C0008:
                                           ; SOURCE LINE # 455
0000 120000      R     LCALL   PWM_GateVoltage_ReadStatusRegister
0003 EF                MOV     A,R7
0004 30E405            JNB     ACC.4,?C0010
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
0007 120000      R     LCALL   PWM_GateVoltage_ReadCapture
                                           ; SOURCE LINE # 458
000A 80F4              SJMP    ?C0008
                                           ; SOURCE LINE # 459
000C         ?C0010:
000C 22                RET     
             ; FUNCTION PWM_GateVoltage_ClearFIFO (END)

             ; FUNCTION _PWM_GateVoltage_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 482
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 487
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 20  

0005 900000      R     MOV     DPTR,#period
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906446            MOV     DPTR,#06446H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
000F 22                RET     
             ; FUNCTION _PWM_GateVoltage_WritePeriod (END)

             ; FUNCTION _PWM_GateVoltage_WriteCompare (BEGIN)
                                           ; SOURCE LINE # 516
0000 900000      R     MOV     DPTR,#compare
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 522
0005 900000      R     MOV     DPTR,#compare
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906426            MOV     DPTR,#06426H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
000F 22                RET     
             ; FUNCTION _PWM_GateVoltage_WriteCompare (END)

             ; FUNCTION _PWM_GateVoltage_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 684
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906486            MOV     DPTR,#06486H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
000F 22                RET     
             ; FUNCTION _PWM_GateVoltage_SetInterruptMode (END)

             ; FUNCTION PWM_GateVoltage_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
0000 906466            MOV     DPTR,#06466H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 714
0005         ?C0014:
0005 22                RET     
             ; FUNCTION PWM_GateVoltage_ReadStatusRegister (END)

             ; FUNCTION PWM_GateVoltage_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 741
0000 906476            MOV     DPTR,#06476H
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 21  

0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#result
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 742
000A 900000      R     MOV     DPTR,#result
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 743
000F         ?C0015:
000F 22                RET     
             ; FUNCTION PWM_GateVoltage_ReadControlRegister (END)

             ; FUNCTION _PWM_GateVoltage_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 765
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906476            MOV     DPTR,#06476H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
000F 22                RET     
             ; FUNCTION _PWM_GateVoltage_WriteControlRegister (END)

             ; FUNCTION PWM_GateVoltage_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 792
0000 906456            MOV     DPTR,#06456H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 793
0005         ?C0017:
0005 22                RET     
             ; FUNCTION PWM_GateVoltage_ReadCapture (END)

             ; FUNCTION PWM_GateVoltage_ReadCompare (BEGIN)
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 821
0000 906426            MOV     DPTR,#06426H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 823
0005         ?C0018:
0005 22                RET     
             ; FUNCTION PWM_GateVoltage_ReadCompare (END)

             ; FUNCTION PWM_GateVoltage_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
                                           ; SOURCE LINE # 889
0000 906446            MOV     DPTR,#06446H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 891
C51 COMPILER V9.51   PWM_GATEVOLTAGE                                                       02/20/2016 01:12:38 PAGE 22  

0005         ?C0019:
0005 22                RET     
             ; FUNCTION PWM_GateVoltage_ReadPeriod (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    279    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
